{"version":3,"sources":["img/app-store.svg","img/google-play.svg","img/phonec8.png","App.js","serviceWorker.js","index.js","img/logo-line.svg"],"names":["module","exports","App","fluid","xs","md","className","src","logo","alt","borderColor","borderWidth","borderStyle","icon","iconColor","backgroundColor","iconSize","roundness","url","size","phone","apple","android","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,wPC0E5BC,MA/Df,WACE,OACE,kBAAC,OAAD,CAAMC,OAAK,GACT,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKC,GAAI,EAAGC,GAAI,GACd,yBAAKC,UAAU,QACb,yBAAKA,UAAU,WAAWC,IAAKC,IAAMC,IAAI,mBAG7C,kBAAC,MAAD,CAAKL,GAAI,EAAGC,GAAI,GACd,yBAAKC,UAAU,UACb,kBAAC,wBAAD,CAAuBA,UAAU,cAAcI,YAAY,mBAAmBC,YAAY,IAAIC,YAAY,QAAQC,KAAK,YAAYC,UAAU,sBAAsBC,gBAAgB,qBAAqBC,SAAS,IAAIC,UAAU,MAAMC,IAAI,+CAA+CC,KAAK,OAC7R,kBAAC,wBAAD,CAAuBb,UAAU,cAAcI,YAAY,mBAAmBC,YAAY,IAAIC,YAAY,QAAQC,KAAK,WAAWC,UAAU,sBAAsBC,gBAAgB,qBAAqBC,SAAS,IAAIC,UAAU,MAAMC,IAAI,+CAA+CC,KAAK,UAIlS,kBAAC,MAAD,KACE,yBAAKb,UAAU,cAAf,8CAkBF,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKF,GAAI,EAAGC,GAAI,IAEhB,kBAAC,MAAD,CAAKD,GAAI,EAAGC,GAAI,GACd,yBAAKC,UAAU,UACb,yBAAKA,UAAU,aAAaC,IAAKa,IAAOX,IAAI,aAIhD,kBAAC,MAAD,CAAKL,GAAI,EAAGC,GAAI,KAGlB,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKD,GAAI,EAAGC,GAAI,GACd,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,cAAcC,IAAKc,IAAOZ,IAAI,gBAGjD,kBAAC,MAAD,CAAKL,GAAI,EAAGC,GAAI,GACd,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,cAAcC,IAAKe,IAASb,IAAI,oBCtDvCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B1C,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.e8db9a57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/app-store.e374ae72.svg\";","module.exports = __webpack_public_path__ + \"static/media/google-play.c68e1c2f.svg\";","module.exports = __webpack_public_path__ + \"static/media/phonec8.e55aaab5.png\";","import React from 'react';\nimport {Grid, Col, Row} from 'react-flexbox-grid';\nimport {SocialMediaIconsReact} from 'social-media-icons-react';\nimport logo from './img/logo-line.svg';\nimport apple from './img/app-store.svg';\nimport android from './img/google-play.svg';\n//import KCarousel from './components/Carousel';\nimport phone from './img/phonec8.png';\n//import app from './img/appimgg.gif';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Grid fluid>\n      <Row>\n        <Col xs={6} md={6}>\n          <div className=\"logo\">\n            <img className=\"logo-img\" src={logo} alt=\"krooppa-logo\"/>\n          </div>\n        </Col>\n        <Col xs={6} md={6}>\n          <div className=\"social\">\n            <SocialMediaIconsReact className=\"social-icon\" borderColor=\"rgba(0,0,0,0.25)\" borderWidth=\"5\" borderStyle=\"solid\" icon=\"instagram\" iconColor=\"rgba(255,255,255,1)\" backgroundColor=\"rgba(44,164,216,1)\" iconSize=\"5\" roundness=\"50%\" url=\"https://some-website.com/my-social-media-url\" size=\"30\" />\n            <SocialMediaIconsReact className=\"social-icon\" borderColor=\"rgba(0,0,0,0.25)\" borderWidth=\"5\" borderStyle=\"solid\" icon=\"facebook\" iconColor=\"rgba(255,255,255,1)\" backgroundColor=\"rgba(44,164,216,1)\" iconSize=\"5\" roundness=\"50%\" url=\"https://some-website.com/my-social-media-url\" size=\"30\" />\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <div className=\"mainPhrase\">\n            ¿Aburrido? ¡Haz planes con Krooppa!\n        </div>\n      </Row>\n      {/*\n      <Row>\n        <Col sm={12} md={6}>\n          <div className=\"phrases\">\n            Únete a un plan y diviértete con nuevos amigos\n          </div>\n        </Col>\n        <Col sm={12} md={6}>\n          <div className=\"phrases\">\n            Coordina tus actividades de manera fácil desde la app\n          </div>\n        </Col>\n      </Row>\n      */}\n      <Row>\n        <Col xs={3} md={3}>\n        </Col>\n        <Col xs={6} md={6}>\n          <div className=\"device\">\n            <img className=\"device-img\" src={phone} alt=\"device\">\n            </img>\n          </div>\n        </Col>\n        <Col xs={3} md={3}>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={6} md={6}>\n          <div className=\"market-apple\">\n            <img className=\"markets-img\" src={apple} alt=\"app-store\"/>\n          </div>\n        </Col>\n        <Col xs={6} md={6}>\n          <div className=\"market-google\">\n            <img className=\"markets-img\" src={android} alt=\"play-store\"/>\n          </div>\n        </Col>\n      </Row>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo-line.3edfe43f.svg\";"],"sourceRoot":""}